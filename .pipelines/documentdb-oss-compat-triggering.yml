trigger:
  branches:
    include:
      - "users/yangqiao/AddTriggeringPipeline"

pool:
  vmImage: 'ubuntu-latest'

stages:  
- stage: TriggerCompatTestPipeline  
  displayName: "Extract Source Branch Name"  
  jobs:  
  - job: TriggerCompatTest  
    steps:  
    - powershell: |  
        $body = '
        { 
                "definition": {
                    "id": 45276
                },
                "templateParameters": {
                  "sourceBranch": "$(Build.SourceBranch)",
                  "sourceCommit": "$(Build.SourceVersion)"
              }
        }
        '
        Write-Host $body
        $personalToken = "$(System.AccessToken)"
        $token =   [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($personalToken)"))
        $header = @{authorization = "Basic $token"}
        $Uri = "https://dev.azure.com/$(INTERNAL_ORGANIZATION)/$(System.TeamProject)/_apis/build/builds?api-version=7.1"
        Write-Host $Uri
        $buildresponse = Invoke-RestMethod -Method Post -ContentType "application/json" -Uri $Uri -Body $body -Headers $header
        Write-Host $buildresponse
        Write-Host "BuildId: $($buildresponse.id)"
        Write-Host "BuildNumber: $($buildresponse.buildNumber)"
        echo "##vso[task.setvariable variable=TriggeredBuildId;isOutput=true]$($buildresponse.id)"  
      displayName: "Trigger Compat Test"  
      name: "TriggerCompatTest"
  
- stage: MonitorCompatPipeline  
  displayName: "Monitor Compat Pipeline"  
  dependsOn: TriggerCompatTestPipeline  
  jobs:  
  - job: MonitorCompatJob  
    variables:
      # map the output variable from A into this job
      buildId: $[ stageDependencies.TriggerCompatTestPipeline.TriggerCompatTest.outputs['TriggerCompatTest.TriggeredBuildId'] ]
    steps:  
    - powershell: | 
        # Wait for the triggered build to start
        $personalToken = "$(System.AccessToken)"  
        $token = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($personalToken)"))  
        $header = @{authorization = "Basic $token"}  
          
        $Uri = "https://dev.azure.com/$(INTERNAL_ORGANIZATION)/$(System.TeamProject)/_apis/build/builds/$buildId?api-version=7.1"  
        Write-Host $Uri  

        $status = ""  
        do {  
          Start-Sleep -Seconds 10  
          $response = Invoke-RestMethod -Method Get -Uri $Uri -Headers $header  
          $status = $response.status  
          Write-Host "Current Status: $status"  
        } while ($status -eq "inProgress" -or $status -eq "notStarted")  
          
        if ($status -ne "completed") {  
          Write-Error "Build did not complete successfully. Final status: $status"  
          exit 1  
        }  

        Write-Host "Build completed successfully. Status: $status"  
      displayName: "MonitorCompatJob"  